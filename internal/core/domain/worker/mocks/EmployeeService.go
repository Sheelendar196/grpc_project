// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/sheelendar196/go-projects/graphql-project/internal/core/domain"
	mock "github.com/stretchr/testify/mock"
)

// EmployeeService is an autogenerated mock type for the EmployeeService type
type EmployeeService struct {
	mock.Mock
}

// DeleteEmployee provides a mock function with given fields: ctx, empID
func (_m *EmployeeService) DeleteEmployee(ctx context.Context, empID string) (*domain.Employee, error) {
	ret := _m.Called(ctx, empID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteEmployee")
	}

	var r0 *domain.Employee
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.Employee, error)); ok {
		return rf(ctx, empID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.Employee); ok {
		r0 = rf(ctx, empID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Employee)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, empID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEmployeeByID provides a mock function with given fields: ctx, empID
func (_m *EmployeeService) GetEmployeeByID(ctx context.Context, empID string) (*domain.Employee, error) {
	ret := _m.Called(ctx, empID)

	if len(ret) == 0 {
		panic("no return value specified for GetEmployeeByID")
	}

	var r0 *domain.Employee
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.Employee, error)); ok {
		return rf(ctx, empID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.Employee); ok {
		r0 = rf(ctx, empID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Employee)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, empID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEmployeeList provides a mock function with given fields: ctx
func (_m *EmployeeService) GetEmployeeList(ctx context.Context) ([]*domain.Employee, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetEmployeeList")
	}

	var r0 []*domain.Employee
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*domain.Employee, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*domain.Employee); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Employee)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveEmployee provides a mock function with given fields: ctx, employee
func (_m *EmployeeService) SaveEmployee(ctx context.Context, employee *domain.Employee) error {
	ret := _m.Called(ctx, employee)

	if len(ret) == 0 {
		panic("no return value specified for SaveEmployee")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Employee) error); ok {
		r0 = rf(ctx, employee)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateEmployeeDetails provides a mock function with given fields: ctx, input
func (_m *EmployeeService) UpdateEmployeeDetails(ctx context.Context, input domain.Employee) (*domain.Employee, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for UpdateEmployeeDetails")
	}

	var r0 *domain.Employee
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Employee) (*domain.Employee, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.Employee) *domain.Employee); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Employee)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.Employee) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewEmployeeService creates a new instance of EmployeeService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEmployeeService(t interface {
	mock.TestingT
	Cleanup(func())
}) *EmployeeService {
	mock := &EmployeeService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
